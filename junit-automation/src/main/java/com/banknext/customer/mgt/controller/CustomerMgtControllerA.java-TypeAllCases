package com.banknext.customer.mgt.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.banknext.customer.mgt.event.publisher.CustomerTxnPublisher;
import com.banknext.customer.mgt.repo.model.Account;
import com.banknext.customer.mgt.repo.model.Customer;
import com.banknext.customer.mgt.service.AccountService;
import com.banknext.customer.mgt.service.CustomerService;
import com.banknext.customer.mgt.service.CustomerServiceImpl;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.ResponseEntity.BodyBuilder;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/customers")
public class CustomerMgtControllerA {

    private CustomerService customerService;
    private AccountService accountService;

    public CustomerMgtControllerA(CustomerService customerService, AccountService accountService) {
        this.customerService = customerService;
        this.accountService = accountService;
    }


    @GetMapping("/{id}/loan/{loanId}")
    public ResponseEntity<Customer> getCustomerByIdWithContent(@PathVariable("id") int id){
    	Customer customer = customerService.getOptCustomerById(id).get();
        return new ResponseEntity<Customer>(customer, HttpStatus.OK);
    }   

    @GetMapping
    public List<Customer> getAllCustomersWithoutResponseEntity(){
        return customerService.findAll();
    }
    
    @GetMapping("/all")
    public ResponseEntity<List<Customer>> getAllCustomersWithResponseEntity(){
        List<Customer> customers = customerService.findAll();
        return new ResponseEntity<List<Customer>>(customers, HttpStatus.OK);
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<Customer> getCustomerById(@PathVariable("id") int customerId){
        return customerService.getOptCustomerById(customerId)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }   
    
    @DeleteMapping("/{id1}")
    public ResponseEntity<String> deleteCustomer(@PathVariable("id1") int customerId){

        customerService.deleteCustomer(customerId);

        return new ResponseEntity<String>("Customer deleted successfully!.", HttpStatus.OK);

    }

          @PostMapping("/{id}/loan/{loanId}")
    public ResponseEntity<Object> createCustomerWithResponseEntityNoContent(@RequestBody Customer 
    		customer, 
    		@PathVariable("id") int customerId,@PathVariable("loanId") int loanId)
     {        
        		 customerService.createCustomer(customer);
        		 //return ResponseEntity.status(HttpStatus.CREATED).build();
        		 return ResponseEntity.ok().build();
    }
          
          
  @PostMapping("/{id}/account/{loanId}")
  public ResponseEntity<Object> createAccountWithResponseEntityNoContent(@RequestBody Account 
  		account, 
  		@PathVariable("id") int accountId,@PathVariable("loanId") int loanId)
   {        
      		 accountService.createAccount(account); 
      		 //return ResponseEntity.status(HttpStatus.CREATED).build();
      		 return ResponseEntity.ok().build();
  } 
  
  @GetMapping("/all/accounts")
  public ResponseEntity<List<Account>> getAllAccountsWithResponseEntity(){
      List<Account> accounts = accountService.findAll();
      return new ResponseEntity<List<Account>>(accounts, HttpStatus.OK);
  }
  
  @GetMapping("/accounts/{id}")
  public ResponseEntity<Account> getAccountById(@PathVariable("id") int accountId){
      return accountService.getOptAccountById(accountId)
              .map(ResponseEntity::ok)
              .orElseGet(() -> ResponseEntity.notFound().build());
  }
  
}