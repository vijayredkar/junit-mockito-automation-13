package com.banknext.customer.mgt.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.banknext.customer.mgt.event.publisher.CustomerTxnPublisher;
import com.banknext.customer.mgt.repo.model.Customer;
import com.banknext.customer.mgt.service.CustomerService;
import com.banknext.customer.mgt.service.CustomerServiceImpl;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.ResponseEntity.BodyBuilder;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/customers")
public class CustomerMgtControllerA {

    private CustomerService customerService;

    public CustomerMgtControllerA(CustomerService customerService) {
        this.customerService = customerService;
    }
        


/*
         @PostMapping
         public Customer createCustomerWithoutResponseEntityWithContent(@RequestBody Customer customer){
             return customerService.createCustomer(customer);
         }
  */      
    
    //@PostMapping
    public Customer createCustomerWithoutResponseEntityWithContent(@RequestBody Customer customer){
      
    	//1this is a comment line
    	//2this is a comment line
    	//3this is a comment line
    	return customerService.createCustomer(customer);
    	//4this is a comment line
    	//5this is a comment line
    }
    
  //6this is a comment line
  //7this is a comment line
    
 
/*
         @PostMapping
         public Customer createCustomerWithoutResponseEntityWithContent(@RequestBody Customer customer){
             return customerService.createCustomer(customer);
         }
  */      
    
    /* 
    @PutMapping("/{id}")
    public ResponseEntity<Customer> updateCustomer(@PathVariable("id") int customerId, @RequestBody Customer customer){
        return customerService.getOptCustomerById(customerId)
                .map(savedCustomer -> {

                    savedCustomer.setFirstName(customer.getFirstName());
                    savedCustomer.setLastName(customer.getLastName());
                    savedCustomer.setEmail(customer.getEmail());

                    Customer updatedCustomer = customerService.updateCustomer(savedCustomer);
                    return new ResponseEntity<>(updatedCustomer, HttpStatus.OK);

                })
                .orElseGet(() -> ResponseEntity.notFound().build());
    }
    
	@PostMapping
   @ResponseStatus(HttpStatus.CREATED)
   public Customer createCustomerWithoutResponseEntityWithContent(@RequestBody Customer customer){
       return customerService.createCustomer(customer);
   }
   
	  */


}